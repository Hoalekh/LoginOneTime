// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LoginOneTime.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LoginOneTime")]
    public partial class LoginOneTimeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "HomePage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "LoginOneTime", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify homepage")]
        public virtual void VerifyHomepage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify homepage", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  testRunner.Given("I go to url \"https://accounts.lambdatest.com/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
  testRunner.Then("I click Dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 6
  testRunner.Then("I click to Real Time Testing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
  testRunner.And("I click to Real Device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify homepagelist")]
        public virtual void VerifyHomepagelist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify homepagelist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
  testRunner.Given("I go to url \"https://www.lambdatest.com/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
  testRunner.Then("I hover over the \"Platform\" tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Platform"});
                table1.AddRow(new string[] {
                            "Online Browser Testing"});
                table1.AddRow(new string[] {
                            "Selenium Testing"});
                table1.AddRow(new string[] {
                            "Cypress Testing"});
                table1.AddRow(new string[] {
                            "Playwright Testing"});
                table1.AddRow(new string[] {
                            "HyperExecute"});
                table1.AddRow(new string[] {
                            "On-Premise Selenium Grid"});
                table1.AddRow(new string[] {
                            "Native Mobile App Testing"});
                table1.AddRow(new string[] {
                            "Real Devices Cloud"});
                table1.AddRow(new string[] {
                            "Visual Regression Cloud"});
                table1.AddRow(new string[] {
                            "Test Intelligence"});
                table1.AddRow(new string[] {
                            "Automation Testing Cloud"});
                table1.AddRow(new string[] {
                            "Smart TV Testing Cloud"});
#line 12
  testRunner.And("the dropdown menu for \"Platform\" displays information", ((string)(null)), table1, "And ");
#line hidden
#line 26
  testRunner.Then("I hover over the \"Enterprise\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Enterprise"});
                table2.AddRow(new string[] {
                            "Digital Experience Testing"});
                table2.AddRow(new string[] {
                            "Enterprise Execution Environment"});
#line 27
  testRunner.And("the dropdown menu for \"Enterprise\" displays information", ((string)(null)), table2, "And ");
#line hidden
#line 31
  testRunner.Then("I hover over the \"Resources\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resources"});
                table3.AddRow(new string[] {
                            "Blog"});
                table3.AddRow(new string[] {
                            "Webinars"});
                table3.AddRow(new string[] {
                            "Learning Hub"});
                table3.AddRow(new string[] {
                            "Videos"});
                table3.AddRow(new string[] {
                            "Documentation"});
                table3.AddRow(new string[] {
                            "API"});
                table3.AddRow(new string[] {
                            "Newsletter"});
                table3.AddRow(new string[] {
                            "Community"});
                table3.AddRow(new string[] {
                            "Certifications"});
                table3.AddRow(new string[] {
                            "Write for Us"});
                table3.AddRow(new string[] {
                            "Customer Stories"});
                table3.AddRow(new string[] {
                            "Community & Support"});
#line 32
  testRunner.And("the dropdown menu for \"Resources\" displays information", ((string)(null)), table3, "And ");
#line hidden
#line 46
  testRunner.Then("I hover over the \"Developers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Developers"});
                table4.AddRow(new string[] {
                            "Selenium"});
                table4.AddRow(new string[] {
                            "Cypress"});
                table4.AddRow(new string[] {
                            "Mobile App Testing"});
                table4.AddRow(new string[] {
                            "Real Time Web Testing"});
                table4.AddRow(new string[] {
                            "Changelog"});
                table4.AddRow(new string[] {
                            "Documentation"});
                table4.AddRow(new string[] {
                            "API"});
                table4.AddRow(new string[] {
                            "GitHub Repositories"});
                table4.AddRow(new string[] {
                            "FAQs"});
                table4.AddRow(new string[] {
                            "Selenium Guide"});
                table4.AddRow(new string[] {
                            "Cypress Guide"});
                table4.AddRow(new string[] {
                            "Mobile Testing Advisor"});
                table4.AddRow(new string[] {
                            "Automation Testing Advisor"});
                table4.AddRow(new string[] {
                            "Web Technologies Compatibility"});
#line 47
  testRunner.And("the dropdown menu for \"Developers\" displays information", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
